<?php
require_once 'config.php';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
if (!isLoggedIn()) {
    redirect('login.php');
}

$currentUser = getCurrentUser();
$pdo = getDB();

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á–µ–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º
$profileUserId = isset($_GET['user_id']) ? (int)$_GET['user_id'] : $currentUser['id'];
$isOwnProfile = ($profileUserId === $currentUser['id']);

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, —á–µ–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º
if ($isOwnProfile) {
    $profileUser = $currentUser;
} else {
    $stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");
    $stmt->execute([$profileUserId]);
    $profileUser = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$profileUser) {
        redirect('index.php'); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    }
}

// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
$commentsQuery = "SELECT COUNT(*) as comments_count FROM comments WHERE user_id = ?";
$stmt = $pdo->prepare($commentsQuery);
$stmt->execute([$profileUserId]);
$commentsCount = $stmt->fetchColumn();

// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–Ω–∏–º–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
$statusCounts = [];
$statusCountQuery = "SELECT status, COUNT(*) as count FROM user_anime_status WHERE user_id = ? GROUP BY status";
$stmt = $pdo->prepare($statusCountQuery);
$stmt->execute([$profileUserId]);
$statusResults = $stmt->fetchAll(PDO::FETCH_ASSOC);

foreach ($statusResults as $row) {
    $statusCounts[$row['status']] = $row['count'];
}

// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
$stats = [
    'watched_count' => $statusCounts['completed'] ?? 0,
    'comments_count' => $commentsCount,
    'planned_count' => $statusCounts['planned'] ?? 0,
    'watching_count' => $statusCounts['watching'] ?? 0,
    'completed_count' => $statusCounts['completed'] ?? 0,
    'dropped_count' => $statusCounts['dropped'] ?? 0
];

// –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–µ–µ –∞–Ω–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
$bestAnimeQuery = "
    SELECT a.title, a.id, r.overall_rating
    FROM anime a
    JOIN ratings r ON a.id = r.anime_id
    WHERE r.user_id = ?
    ORDER BY r.overall_rating DESC, r.created_at ASC
    LIMIT 1
";
$stmt = $pdo->prepare($bestAnimeQuery);
$stmt->execute([$profileUserId]);
$bestAnime = $stmt->fetch(PDO::FETCH_ASSOC);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∏–º–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É
function getUserAnimeByStatus($pdo, $userId, $status) {
    $queries = [
        'completed' => "
            SELECT a.*, r.overall_rating as rating, uas.created_at as rated_at, uas.status as watch_status
            FROM anime a
            JOIN user_anime_status uas ON a.id = uas.anime_id
            LEFT JOIN ratings r ON a.id = r.anime_id AND r.user_id = uas.user_id
            WHERE uas.user_id = ? AND uas.status = 'completed'
            ORDER BY uas.created_at DESC
        ",
        'planned' => "
            SELECT a.*, NULL as rating, uas.created_at as rated_at, uas.status as watch_status
            FROM anime a
            JOIN user_anime_status uas ON a.id = uas.anime_id
            WHERE uas.user_id = ? AND uas.status = 'planned'
            ORDER BY uas.created_at DESC
        ",
        'watching' => "
            SELECT a.*, r.overall_rating as rating, uas.created_at as rated_at, uas.status as watch_status
            FROM anime a
            JOIN user_anime_status uas ON a.id = uas.anime_id
            LEFT JOIN ratings r ON a.id = r.anime_id AND r.user_id = uas.user_id
            WHERE uas.user_id = ? AND uas.status = 'watching'
            ORDER BY uas.created_at DESC
        ",
        'dropped' => "
            SELECT a.*, r.overall_rating as rating, uas.created_at as rated_at, uas.status as watch_status
            FROM anime a
            JOIN user_anime_status uas ON a.id = uas.anime_id
            LEFT JOIN ratings r ON a.id = r.anime_id AND r.user_id = uas.user_id
            WHERE uas.user_id = ? AND uas.status = 'dropped'
            ORDER BY uas.created_at DESC
        "
    ];

    if (!isset($queries[$status])) {
        return [];
    }

    $stmt = $pdo->prepare($queries[$status]);
    $stmt->execute([$userId]);
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// AJAX –æ–±—Ä–∞–±–æ—Ç–∫–∞
if (isset($_GET['ajax']) && $_GET['ajax'] === '1') {
    $requestedTab = $_GET['tab'] ?? 'completed';
    $userAnime = getUserAnimeByStatus($pdo, $profileUserId, $requestedTab);

    if ($userAnime) {
        echo '<div class="anime-results-info">';
        echo '<p>–ù–∞–π–¥–µ–Ω–æ: <strong>' . count($userAnime) . '</strong> –∞–Ω–∏–º–µ</p>';
        echo '</div>';
        echo '<div class="anime-grid">';
        foreach ($userAnime as $anime) {
            $draggableAttr = $isOwnProfile ? 'draggable="true"' : '';
            echo '<div class="anime-card" data-anime-id="' . $anime['id'] . '" ' . $draggableAttr . ' data-current-status="' . $requestedTab . '">';
            echo '<a href="anime.php?id=' . $anime['id'] . '" class="anime-image-link">';
            if ($anime['image_url']) {
                echo '<img src="' . h($anime['image_url']) . '" alt="' . h($anime['title']) . '" class="anime-image" />';
            } else {
                echo '<div class="anime-image-placeholder">üéå</div>';
            }
            echo '</a>';
            echo '<div class="anime-info">';
            echo '<h3><a href="anime.php?id=' . $anime['id'] . '">' . h($anime['title']) . '</a></h3>';
            echo '<p class="anime-genre">' . h($anime['genre']) . ' ‚Ä¢ ' . h($anime['year']) . '</p>';
            echo '<p class="anime-description">' . h(substr($anime['description'], 0, 100)) . '...</p>';
            echo '<div class="anime-rating">';
            if ($anime['rating']) {
                echo '<span class="rating-stars">‚≠ê ' . $anime['rating'] . '/10</span>';
                echo '<span class="rating-count">–û—Ü–µ–Ω–µ–Ω–æ ' . formatDate($anime['rated_at']) . '</span>';
            } else {
                switch ($anime['watch_status']) {
                    case 'planned':
                        echo '<span class="status-badge planned">üìù –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</span>';
                        break;
                    case 'watching':
                        echo '<span class="status-badge watching">üëÄ –°–º–æ—Ç—Ä—é</span>';
                        break;
                    case 'dropped':
                        echo '<span class="status-badge dropped">‚ùå –ë—Ä–æ—à–µ–Ω–æ</span>';
                        break;
                    default:
                        echo '<span class="status-badge">–î–æ–±–∞–≤–ª–µ–Ω–æ ' . formatDate($anime['rated_at']) . '</span>';
                }
            }
            echo '</div>';
            echo '</div>';
            echo '</div>';
        }
        echo '</div>';
    } else {
        echo '<div class="profile-container">';
        $userName = $isOwnProfile ? '–í—ã' : h($profileUser['username']);
        switch ($requestedTab) {
            case 'completed':
                echo '<p>' . ($isOwnProfile ? '–í—ã –µ—â–µ –Ω–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.' : h($profileUser['username']) . ' –Ω–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.') . '</p>';
                break;
            case 'planned':
                echo '<p>' . ($isOwnProfile ? '–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.' : h($profileUser['username']) . ' –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª(–∞) –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.') . '</p>';
                break;
            case 'watching':
                echo '<p>' . ($isOwnProfile ? '–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.' : h($profileUser['username']) . ' –Ω–µ –Ω–∞—á–∞–ª(–∞) —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.') . '</p>';
                break;
            case 'dropped':
                echo '<p>' . ($isOwnProfile ? '–í—ã –µ—â–µ –Ω–µ –±—Ä–æ—Å–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.' : h($profileUser['username']) . ' –Ω–µ –±—Ä–æ—Å–∏–ª(–∞) –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.') . '</p>';
                break;
        }
        echo '</div>';
    }
    exit;
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∏–º–µ –¥–ª—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
$activeTab = $_GET['tab'] ?? 'completed';
$userAnime = getUserAnimeByStatus($pdo, $profileUserId, $activeTab);

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
$userCommentsQuery = "
    SELECT c.*, a.title as anime_title
    FROM comments c
    JOIN anime a ON c.anime_id = a.id
    WHERE c.user_id = ?
    ORDER BY c.created_at DESC
    LIMIT 10
";
$stmt = $pdo->prepare($userCommentsQuery);
$stmt->execute([$profileUserId]);
$userComments = $stmt->fetchAll(PDO::FETCH_ASSOC);
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="csrf-token" content="<?php echo generateCSRFToken(); ?>" />
    <title><?php echo $isOwnProfile ? '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' : '–ü—Ä–æ—Ñ–∏–ª—å ' . h($profileUser['username']); ?> - <?php echo SITE_NAME; ?></title>
    <link rel="stylesheet" href="style.css" />
    <style>
        /* –°—Ç–∏–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */
        .watch-status-tabs {
            margin: 30px 0;
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        [data-theme="dark"] .watch-status-tabs {
            background: var(--card-bg);
        }

        .tabs-header {
            display: flex;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        [data-theme="dark"] .tabs-header {
            background: var(--primary-gradient);
        }

        .tab-button {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px 10px;
            text-decoration: none;
            color: rgba(255, 255, 255, 0.8);
            transition: all 0.3s ease;
            position: relative;
            border-right: 1px solid rgba(255, 255, 255, 0.1);
            border: none;
            background: none;
            cursor: pointer;
        }

        .tab-button:last-child {
            border-right: none;
        }

        .tab-button:hover {
            color: white;
            background: rgba(255, 255, 255, 0.1);
        }

        .tab-button.active {
            color: white;
            background: rgba(255, 255, 255, 0.2);
            box-shadow: inset 0 3px 0 0 #fff;
        }

        .tab-icon {
            font-size: 24px;
            margin-bottom: 8px;
        }

        .tab-text {
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 4px;
        }

        .tab-count {
            background: rgba(255, 255, 255, 0.3);
            color: white;
            font-size: 12px;
            font-weight: bold;
            padding: 2px 8px;
            border-radius: 12px;
            min-width: 20px;
            text-align: center;
        }

        .tab-button.active .tab-count {
            background: rgba(255, 255, 255, 0.4);
        }

        /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∫–ª–∞–¥–æ–∫ */
        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */
        .loading {
            text-align: center;
            padding: 40px 20px;
            font-size: 16px;
            color: var(--text-secondary);
        }

        /* –°—Ç–∏–ª–∏ –¥–ª—è –±–µ–π–¥–∂–µ–π —Å—Ç–∞—Ç—É—Å–∞ */
        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
            display: inline-block;
        }

        .status-badge.planned {
            background: #e3f2fd;
            color: #1976d2;
        }

        .status-badge.watching {
            background: #f3e5f5;
            color: #7b1fa2;
        }

        .status-badge.dropped {
            background: #ffebee;
            color: #d32f2f;
        }

        [data-theme="dark"] .status-badge.planned {
            background: rgba(25, 118, 210, 0.2);
            color: #90caf9;
        }

        [data-theme="dark"] .status-badge.watching {
            background: rgba(123, 31, 162, 0.2);
            color: #ce93d8;
        }

        [data-theme="dark"] .status-badge.dropped {
            background: rgba(211, 47, 47, 0.2);
            color: #ef5350;
        }

        /* –°—Ç–∏–ª–∏ –¥–ª—è drag-and-drop */
        .anime-card {
            cursor: grab;
            transition: all 0.3s ease;
        }

        .anime-card:active {
            cursor: grabbing;
        }

        .anime-card.dragging {
            opacity: 0.5;
            transform: rotate(5deg);
            z-index: 1000;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

        .tab-button.drag-over {
            background: rgba(255, 255, 255, 0.3) !important;
            transform: scale(1.05);
            animation: pulse 0.5s infinite;
        }

        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.3); }
            50% { box-shadow: 0 0 0 10px rgba(255, 255, 255, 0.1); }
            100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0); }
        }

        /* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è */
        .drag-indicator {
            position: fixed;
            top: 10px;
            right: 10px;
            background: var(--primary-gradient);
            color: white;
            padding: 10px 15px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            z-index: 9999;
            opacity: 0;
            transform: translateY(-20px);
            transition: all 0.3s ease;
            pointer-events: none;
        }

        .drag-indicator.show {
            opacity: 1;
            transform: translateY(0);
        }

        /* Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--primary-gradient);
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            z-index: 9999;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
            max-width: 300px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .toast.show {
            opacity: 1;
            transform: translateX(0);
        }

        .toast.success {
            background: linear-gradient(135deg, #28a745, #20c997);
        }

        .toast.error {
            background: linear-gradient(135deg, #dc3545, #c82333);
        }

        /* –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ */
        .anime-card.removing {
            opacity: 0;
            transform: scale(0.8);
            transition: all 0.3s ease;
        }

        /* –°—Ç–∏–ª–∏ –¥–ª—è drop zones */
        .tab-button.drop-zone {
            position: relative;
        }

        .tab-button.drop-zone::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border: 2px dashed transparent;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .tab-button.drop-zone.drag-over::after {
            border-color: rgba(255, 255, 255, 0.8);
            background: rgba(255, 255, 255, 0.1);
        }

        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
        @media (max-width: 768px) {
            .tabs-header {
                flex-wrap: wrap;
            }

            .tab-button {
                flex-basis: 50%;
                padding: 15px 8px;
            }

            .tab-text {
                font-size: 12px;
            }

            .tab-icon {
                font-size: 20px;
                margin-bottom: 4px;
            }
        }

        @media (max-width: 480px) {
            .tab-button {
                flex-basis: 100%;
                flex-direction: row;
                justify-content: center;
                gap: 10px;
                padding: 12px;
            }

            .tab-icon {
                margin-bottom: 0;
                font-size: 18px;
            }

            /* –û—Ç–∫–ª—é—á–∞–µ–º drag-and-drop –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */
            .anime-card {
                cursor: pointer;
            }

            .anime-card[draggable="true"] {
                cursor: pointer;
            }
        }
    </style>
</head>
<body>
    <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è) -->
    <?php if ($isOwnProfile): ?>
    <div id="dragIndicator" class="drag-indicator">
        –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    </div>
    <?php endif; ?>

    <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π -->
    <div id="toastContainer"></div>

    <header class="header">
        <div class="container">
            <h1 class="logo"><a href="index.php"><?php echo SITE_NAME; ?></a></h1>
            <nav class="nav">
                <?php if ($currentUser): ?>
                    <?php if (isAdmin()): ?>
                        <a href="add_anime.php">–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–µ</a>
                    <?php endif; ?>
                    <a href="logout.php">–í—ã–π—Ç–∏</a>
                    <div class="user-info">
                        <span class="user-name"><?php echo h($currentUser['username']); ?></span>
                        <?php if ($currentUser['avatar'] && file_exists($currentUser['avatar'])): ?>
                            <img src="<?php echo h($currentUser['avatar']); ?>" alt="–ê–≤–∞—Ç–∞—Ä–∫–∞ <?php echo h($currentUser['username']); ?>" class="user-avatar" />
                        <?php else: ?>
                            <div class="user-avatar" title="<?php echo h($currentUser['username']); ?>">
                                <?php echo strtoupper(substr($currentUser['username'], 0, 1)); ?>
                            </div>
                        <?php endif; ?>
                    </div>
                <?php else: ?>
                    <a href="login.php">–í–æ–π—Ç–∏</a>
                    <a href="register.php">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>
                <?php endif; ?>
                <button class="theme-toggle" id="themeToggle" title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É">
                    <span class="theme-icon sun">‚òÄÔ∏è</span>
                    <span class="theme-icon moon">üåô</span>
                </button>
            </nav>
        </div>
    </header>

    <main class="main">
        <div class="container">
            <div class="profile-container">
                <h2>
                    <?php if ($isOwnProfile): ?>
                        üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç - <?php echo h($profileUser['username']); ?>
                    <?php else: ?>
                        üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - <?php echo h($profileUser['username']); ?>
                    <?php endif; ?>
                </h2>

                <div class="profile-avatar-section">
                    <div class="profile-avatar-large">
                        <?php if ($profileUser['avatar'] && file_exists($profileUser['avatar'])): ?>
                            <img src="<?php echo h($profileUser['avatar']); ?>" alt="–ê–≤–∞—Ç–∞—Ä–∫–∞ <?php echo h($profileUser['username']); ?>" class="profile-avatar-img" />
                        <?php else: ?>
                            <div class="profile-avatar-placeholder" title="<?php echo h($profileUser['username']); ?>">
                                <?php echo strtoupper(substr($profileUser['username'], 0, 1)); ?>
                            </div>
                        <?php endif; ?>
                    </div>
                    <div class="profile-info">
                        <h3><?php echo h($profileUser['username']); ?></h3>
                        <p class="profile-role"><?php echo $profileUser['role'] === 'admin' ? 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'; ?></p>
                        <p class="profile-date">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <?php echo formatDate($profileUser['created_at']); ?></p>
                    </div>
                </div>

                <div class="user-stats">
                    <div class="stat-card">
                        <span class="stat-number"><?php echo $stats['watched_count']; ?></span>
                        <span class="stat-label">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–Ω–∏–º–µ</span>
                    </div>
                    <div class="stat-card best-anime">
                        <?php if ($bestAnime): ?>
                            <span class="stat-number">‚≠ê <?php echo $bestAnime['overall_rating']; ?>/10</span>
                            <span class="stat-label">
                                <a href="anime.php?id=<?php echo $bestAnime['id']; ?>">
                                    <?php echo h($bestAnime['title']); ?>
                                </a>
                            </span>
                            <small class="best-anime-desc">–õ—É—á—à–µ–µ –∞–Ω–∏–º–µ</small>
                        <?php else: ?>
                            <span class="stat-number">‚Äî</span>
                            <span class="stat-label">–õ—É—á—à–µ–µ –∞–Ω–∏–º–µ</span>
                            <small class="best-anime-desc">–ù–µ –æ—Ü–µ–Ω–µ–Ω–æ</small>
                        <?php endif; ?>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number"><?php echo $stats['comments_count']; ?></span>
                        <span class="stat-label">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</span>
                    </div>
                </div>
            </div>

            <!-- –í–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ -->
            <section class="watch-status-tabs">
                <div class="tabs-header">
                    <button type="button" onclick="switchTab('completed')" class="tab-button drop-zone <?php echo $activeTab === 'completed' ? 'active' : ''; ?>" data-tab="completed" data-status="completed">
                        <span class="tab-icon">‚úÖ</span>
                        <span class="tab-text">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ</span>
                        <span class="tab-count" id="completed-count"><?php echo $stats['completed_count']; ?></span>
                    </button>
                    <button type="button" onclick="switchTab('planned')" class="tab-button drop-zone <?php echo $activeTab === 'planned' ? 'active' : ''; ?>" data-tab="planned" data-status="planned">
                        <span class="tab-icon">üìù</span>
                        <span class="tab-text">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</span>
                        <span class="tab-count" id="planned-count"><?php echo $stats['planned_count']; ?></span>
                    </button>
                    <button type="button" onclick="switchTab('watching')" class="tab-button drop-zone <?php echo $activeTab === 'watching' ? 'active' : ''; ?>" data-tab="watching" data-status="watching">
                        <span class="tab-icon">üëÄ</span>
                        <span class="tab-text">–°–º–æ—Ç—Ä—é</span>
                        <span class="tab-count" id="watching-count"><?php echo $stats['watching_count']; ?></span>
                    </button>
                    <button type="button" onclick="switchTab('dropped')" class="tab-button drop-zone <?php echo $activeTab === 'dropped' ? 'active' : ''; ?>" data-tab="dropped" data-status="dropped">
                        <span class="tab-icon">‚ùå</span>
                        <span class="tab-text">–ë—Ä–æ—à–µ–Ω–æ</span>
                        <span class="tab-count" id="dropped-count"><?php echo $stats['dropped_count']; ?></span>
                    </button>
                </div>
            </section>

            <section class="user-anime">
                <div class="anime-header">
                    <h2 id="anime-section-title">üé¨
                        <span id="section-title-text">
                            <?php
                            if ($isOwnProfile) {
                                switch ($activeTab) {
                                    case 'completed': echo '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ'; break;
                                    case 'planned': echo '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–µ'; break;
                                    case 'watching': echo '–°–º–æ—Ç—Ä—é —Å–µ–π—á–∞—Å'; break;
                                    case 'dropped': echo '–ë—Ä–æ—à–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ'; break;
                                    default: echo '–ú–æ–∏ –∞–Ω–∏–º–µ';
                                }
                            } else {
                                $userName = h($profileUser['username']);
                                switch ($activeTab) {
                                    case 'completed': echo "–ê–Ω–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userName (–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ)"; break;
                                    case 'planned': echo "–ê–Ω–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userName (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)"; break;
                                    case 'watching': echo "–ê–Ω–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userName (—Å–º–æ—Ç—Ä–∏—Ç —Å–µ–π—á–∞—Å)"; break;
                                    case 'dropped': echo "–ê–Ω–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userName (–±—Ä–æ—à–µ–Ω–Ω—ã–µ)"; break;
                                    default: echo "–ê–Ω–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userName";
                                }
                            }
                            ?>
                        </span>
                    </h2>
                </div>

                <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ -->
                <div id="tab-content-container">
                    <?php if ($userAnime): ?>
                        <div class="anime-results-info">
                            <p>–ù–∞–π–¥–µ–Ω–æ: <strong><?php echo count($userAnime); ?></strong> –∞–Ω–∏–º–µ</p>
                        </div>
                        <div class="anime-grid">
                            <?php foreach ($userAnime as $anime): ?>
                                <div class="anime-card" data-anime-id="<?php echo $anime['id']; ?>" <?php echo $isOwnProfile ? 'draggable="true"' : ''; ?> data-current-status="<?php echo $activeTab; ?>">
                                    <a href="anime.php?id=<?php echo $anime['id']; ?>" class="anime-image-link">
                                        <?php if ($anime['image_url']): ?>
                                            <img src="<?php echo h($anime['image_url']); ?>" alt="<?php echo h($anime['title']); ?>" class="anime-image" />
                                        <?php else: ?>
                                            <div class="anime-image-placeholder">üéå</div>
                                        <?php endif; ?>
                                    </a>
                                    <div class="anime-info">
                                        <h3><a href="anime.php?id=<?php echo $anime['id']; ?>"><?php echo h($anime['title']); ?></a></h3>
                                        <p class="anime-genre"><?php echo h($anime['genre']); ?> ‚Ä¢ <?php echo h($anime['year']); ?></p>
                                        <p class="anime-description"><?php echo h(substr($anime['description'], 0, 100)); ?>...</p>
                                        <div class="anime-rating">
                                            <?php if ($anime['rating']): ?>
                                                <span class="rating-stars">‚≠ê <?php echo $anime['rating']; ?>/10</span>
                                                <span class="rating-count">–û—Ü–µ–Ω–µ–Ω–æ <?php echo formatDate($anime['rated_at']); ?></span>
                                            <?php else: ?>
                                                <?php
                                                switch ($anime['watch_status']) {
                                                    case 'planned':
                                                        echo '<span class="status-badge planned">üìù –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</span>';
                                                        break;
                                                    case 'watching':
                                                        echo '<span class="status-badge watching">üëÄ –°–º–æ—Ç—Ä—é</span>';
                                                        break;
                                                    case 'dropped':
                                                        echo '<span class="status-badge dropped">‚ùå –ë—Ä–æ—à–µ–Ω–æ</span>';
                                                        break;
                                                    default:
                                                        echo '<span class="status-badge">–î–æ–±–∞–≤–ª–µ–Ω–æ ' . formatDate($anime['rated_at']) . '</span>';
                                                }
                                                ?>
                                            <?php endif; ?>
                                        </div>
                                    </div>
                                </div>
                            <?php endforeach; ?>
                        </div>
                    <?php else: ?>
                        <div class="profile-container">
                            <p>
                            <?php
                            switch ($activeTab) {
                                case 'completed':
                                    echo $isOwnProfile ? '–í—ã –µ—â–µ –Ω–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.' : h($profileUser['username']) . ' –Ω–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.';
                                    break;
                                case 'planned':
                                    echo $isOwnProfile ? '–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.' : h($profileUser['username']) . ' –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª(–∞) –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.';
                                    break;
                                case 'watching':
                                    echo $isOwnProfile ? '–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.' : h($profileUser['username']) . ' –Ω–µ –Ω–∞—á–∞–ª(–∞) —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.';
                                    break;
                                case 'dropped':
                                    echo $isOwnProfile ? '–í—ã –µ—â–µ –Ω–µ –±—Ä–æ—Å–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.' : h($profileUser['username']) . ' –Ω–µ –±—Ä–æ—Å–∏–ª(–∞) –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.';
                                    break;
                            }
                            ?>
                            </p>
                        </div>
                    <?php endif; ?>
                </div>
            </section>

            <section class="user-comments">
                <h2>üí¨ <?php echo $isOwnProfile ? '–ú–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏' : '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' . h($profileUser['username']); ?></h2>
                <?php if ($userComments): ?>
                    <div class="comments-list">
                        <?php foreach ($userComments as $comment): ?>
                            <div class="comment-item">
                                <div class="comment-header">
                                    <span class="comment-anime">–æ <a href="anime.php?id=<?php echo $comment['anime_id']; ?>"><?php echo h($comment['anime_title']); ?></a></span>
                                    <span class="comment-date"><?php echo formatDate($comment['created_at']); ?></span>
                                </div>
                                <div class="comment-text">
                                    <?php echo h($comment['comment']); ?>
                                </div>
                            </div>
                        <?php endforeach; ?>
                    </div>
                <?php else: ?>
                    <div class="profile-container">
                        <p>
                        <?php
                        if ($isOwnProfile) {
                            echo '–í—ã –µ—â–µ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.';
                        } else {
                            echo h($profileUser['username']) . ' –Ω–µ –æ—Å—Ç–∞–≤–∏–ª(–∞) –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.';
                        }
                        ?>
                        </p>
                    </div>
                <?php endif; ?>
            </section>
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <p>&copy; 2025 <?php echo SITE_NAME; ?>. –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.</p>
        </div>
    </footer>

    <script>
        // –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
        let currentTab = '<?php echo $activeTab; ?>';

        // –¢–µ–∫—Å—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
        const tabTitles = {
            completed: '<?php echo $isOwnProfile ? "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ" : "–ê–Ω–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " . h($profileUser["username"]) . " (–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ)"; ?>',
            planned: '<?php echo $isOwnProfile ? "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–µ" : "–ê–Ω–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " . h($profileUser["username"]) . " (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)"; ?>',
            watching: '<?php echo $isOwnProfile ? "–°–º–æ—Ç—Ä—é —Å–µ–π—á–∞—Å" : "–ê–Ω–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " . h($profileUser["username"]) . " (—Å–º–æ—Ç—Ä–∏—Ç —Å–µ–π—á–∞—Å)"; ?>',
            dropped: '<?php echo $isOwnProfile ? "–ë—Ä–æ—à–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ" : "–ê–Ω–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " . h($profileUser["username"]) . " (–±—Ä–æ—à–µ–Ω–Ω—ã–µ)"; ?>'
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        function switchTab(tabName) {
            if (currentTab === tabName) return;

            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            const allTabButtons = document.querySelectorAll('.tab-button');
            allTabButtons.forEach(button => {
                button.classList.remove('active');
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ
            const activeButton = document.querySelector(`[data-tab="${tabName}"]`);
            if (activeButton) {
                activeButton.classList.add('active');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
            const titleElement = document.getElementById('section-title-text');
            if (titleElement && tabTitles[tabName]) {
                titleElement.textContent = tabTitles[tabName];
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            currentTab = tabName;
            sessionStorage.setItem('activeTab', tabName);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ —á–µ—Ä–µ–∑ AJAX
            loadTabContent(tabName);
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∫–ª–∞–¥–∫–∏ —á–µ—Ä–µ–∑ AJAX
        function loadTabContent(tabName) {
            const contentContainer = document.getElementById('tab-content-container');
            if (!contentContainer) return;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            contentContainer.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';

            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–∞
            const currentUrl = new URL(window.location);
            currentUrl.searchParams.set('tab', tabName);
            currentUrl.searchParams.set('ajax', '1');

            // –í—ã–ø–æ–ª–Ω—è–µ–º AJAX –∑–∞–ø—Ä–æ—Å
            fetch(currentUrl.toString())
                .then(response => response.text())
                .then(data => {
                    contentContainer.innerHTML = data;

                    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–Ω–∏–º–µ
                    initAnimeCardHandlers();

                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–∞—Ä—Ç–æ—á–µ–∫
                    syncTabCounter(tabName);
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
                    contentContainer.innerHTML = '<div class="profile-container"><p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.</p></div>';
                });
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–∞—Ä—Ç–æ—á–µ–∫
        function syncTabCounter(tabName) {
            const actualCardsCount = document.querySelectorAll('.anime-card').length;
            const counterElement = document.getElementById(tabName + '-count');

            if (counterElement) {
                counterElement.textContent = actualCardsCount;
                console.log(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å—á–µ—Ç—á–∏–∫ –¥–ª—è ${tabName}: ${actualCardsCount}`);
            }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–Ω–∏–º–µ
        function initAnimeCardHandlers() {
            const animeCards = document.querySelectorAll('.anime-card');
            animeCards.forEach(card => {
                card.style.cursor = 'pointer';

                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                card.removeEventListener('click', handleAnimeCardClick);
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
                card.addEventListener('click', handleAnimeCardClick);
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –∞–Ω–∏–º–µ
        function handleAnimeCardClick(e) {
            // –ù–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –ø–æ —Å—Å—ã–ª–∫–µ
            if (e.target.tagName === 'A' || e.target.closest('a')) {
                return;
            }

            const animeId = this.getAttribute('data-anime-id');
            if (animeId) {
                window.location.href = `anime.php?id=${animeId}`;
            }
        }

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏
        document.addEventListener('DOMContentLoaded', function() {
            const themeToggle = document.getElementById('themeToggle');
            const body = document.body;

            // –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É –∏–∑ localStorage
            const savedTheme = localStorage.getItem('theme') || 'light';
            body.setAttribute('data-theme', savedTheme);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
            if (themeToggle) {
                themeToggle.addEventListener('click', function() {
                    const currentTheme = body.getAttribute('data-theme');
                    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

                    body.setAttribute('data-theme', newTheme);
                    localStorage.setItem('theme', newTheme);

                    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                    body.style.transition = 'all 0.3s ease';
                    setTimeout(() => {
                        body.style.transition = '';
                    }, 300);
                });
            }

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const savedTab = sessionStorage.getItem('activeTab');
            if (savedTab && savedTab !== currentTab && document.querySelector(`[data-tab="${savedTab}"]`)) {
                switchTab(savedTab);
            } else {
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                syncTabCounter(currentTab);
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–Ω–∏–º–µ
            initAnimeCardHandlers();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag-and-drop —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            <?php if ($isOwnProfile): ?>
            initDragAndDrop();
            <?php endif; ?>
        });

        <?php if ($isOwnProfile): ?>
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è drag-and-drop
        let draggedCard = null;
        let sourceStatus = null;
        let isDragAndDropInitialized = false;

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drag-and-drop
        function initDragAndDrop() {
            // –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if (isDragAndDropInitialized) return;

            console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop...');

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ document (–æ–¥–∏–Ω —Ä–∞–∑)
            document.addEventListener('dragstart', handleDragStart);
            document.addEventListener('dragend', handleDragEnd);

            // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ dragend –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            document.addEventListener('dragend', function(e) {
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö drag-over —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                setTimeout(clearAllDragEffects, 50);
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                setTimeout(hideDragIndicator, 100);
            });

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            document.addEventListener('dragcancel', function(e) {
                clearAllDragEffects();
                hideDragIndicator();
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã
            document.addEventListener('mouseup', function(e) {
                // –ï—Å–ª–∏ –º—ã—à—å –æ—Ç–ø—É—â–µ–Ω–∞, –Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—Å–µ –µ—â–µ –≤–∏–¥–µ–Ω, —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
                setTimeout(() => {
                    if (!draggedCard) {
                        hideDragIndicator();
                    }
                }, 200);
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è drop zones
            const dropZones = document.querySelectorAll('.tab-button.drop-zone');
            console.log('–ù–∞–π–¥–µ–Ω–æ drop zones:', dropZones.length);

            dropZones.forEach(zone => {
                zone.addEventListener('dragover', handleDragOver);
                zone.addEventListener('drop', handleDrop);
                zone.addEventListener('dragenter', handleDragEnter);
                zone.addEventListener('dragleave', handleDragLeave);
            });

            isDragAndDropInitialized = true;
            console.log('Drag-and-drop –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        function handleDragStart(e) {
            console.log('Drag start triggered', e.target);

            // –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é anime-card, –≤–∫–ª—é—á–∞—è —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç
            const animeCard = e.target.closest('.anime-card');

            if (!animeCard) {
                console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ anime-card');
                return;
            }

            draggedCard = animeCard;
            sourceStatus = draggedCard.getAttribute('data-current-status');

            console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ:', {
                animeId: draggedCard.getAttribute('data-anime-id'),
                sourceStatus: sourceStatus
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            draggedCard.classList.add('dragging');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            showDragIndicator();

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
            e.dataTransfer.setData('text/plain', '');
            e.dataTransfer.effectAllowed = 'move';
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        function handleDragEnd(e) {
            if (!e.target.classList.contains('anime-card')) return;

            // –£–±–∏—Ä–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            e.target.classList.remove('dragging');

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º –≤—Å–µ drag-over —ç—Ñ—Ñ–µ–∫—Ç—ã
            clearAllDragEffects();

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
            setTimeout(() => {
                clearAllDragEffects();
            }, 100);

            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            hideDragIndicator();

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            draggedCard = null;
            sourceStatus = null;
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ drop zone
        function handleDragOver(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ drop zone
        function handleDragEnter(e) {
            if (!draggedCard) return;
            e.target.closest('.tab-button').classList.add('drag-over');
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ drop zone
        function handleDragLeave(e) {
            const dropZone = e.target.closest('.tab-button');
            if (dropZone && !dropZone.contains(e.relatedTarget)) {
                dropZone.classList.remove('drag-over');
            }
        }

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ drag-over —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∑–º)
        function clearAllDragEffects() {
            document.querySelectorAll('.tab-button.drop-zone').forEach(zone => {
                zone.classList.remove('drag-over');
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ drop
        function handleDrop(e) {
            e.preventDefault();
            console.log('Drop triggered', e.target);

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º –≤—Å–µ drag-over —ç—Ñ—Ñ–µ–∫—Ç—ã
            clearAllDragEffects();

            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            hideDragIndicator();

            if (!draggedCard) {
                console.log('–ù–µ—Ç draggedCard');
                return;
            }

            const dropZone = e.target.closest('.tab-button.drop-zone');
            if (!dropZone) {
                console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ drop zone');
                return;
            }

            const targetStatus = dropZone.getAttribute('data-status');
            console.log('Drop –Ω–∞ —Å—Ç–∞—Ç—É—Å:', targetStatus, '—Å:', sourceStatus);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            if (sourceStatus === targetStatus) {
                showToast('–ê–Ω–∏–º–µ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'info');
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            changeAnimeStatus(draggedCard.getAttribute('data-anime-id'), targetStatus, draggedCard);
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∏–º–µ
        function changeAnimeStatus(animeId, newStatus, cardElement) {
            console.log('changeAnimeStatus –≤—ã–∑–≤–∞–Ω–∞:', { animeId, newStatus });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
            cardElement.classList.add('removing');

            // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
            const csrfToken = getCsrfToken();
            console.log('CSRF —Ç–æ–∫–µ–Ω:', csrfToken);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            const formData = new FormData();
            formData.append('anime_id', animeId);
            formData.append('anime_status', newStatus);
            formData.append('csrf_token', csrfToken);

            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º AJAX –∑–∞–ø—Ä–æ—Å...');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AJAX –∑–∞–ø—Ä–æ—Å
            fetch('change_status.php', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                console.log('–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.status, response.statusText);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);
                if (data.success) {
                    // –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å
                    showToast(data.message, 'success');

                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –î–û —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
                    updateStatusCounts(newStatus);

                    // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
                    setTimeout(() => {
                        cardElement.remove();
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        checkAndShowEmptyMessage();
                    }, 300);

                } else {
                    // –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                    showToast(data.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', 'error');
                    cardElement.classList.remove('removing');
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞:', error);
                showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞', 'error');
                cardElement.classList.remove('removing');
            });
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞
        function getCsrfToken() {
            const token = document.querySelector('meta[name="csrf-token"]');
            return token ? token.getAttribute('content') : null;
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
        function updateStatusCounts(targetStatus = null) {
            // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏ –Ω–∞ 1
            const currentCountElement = document.getElementById(currentTab + '-count');
            if (currentCountElement) {
                const currentCount = parseInt(currentCountElement.textContent) || 0;
                currentCountElement.textContent = Math.max(0, currentCount - 1);
            }

            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞—Ç—É—Å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ —Å—á–µ—Ç—á–∏–∫
            if (targetStatus && targetStatus !== currentTab) {
                const targetCountElement = document.getElementById(targetStatus + '-count');
                if (targetCountElement) {
                    const targetCount = parseInt(targetCountElement.textContent) || 0;
                    targetCountElement.textContent = targetCount + 1;
                }
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–∫–∞–∑–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        function checkAndShowEmptyMessage() {
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ –ü–û–°–õ–ï —É–¥–∞–ª–µ–Ω–∏—è
            const currentCards = document.querySelectorAll('.anime-card').length;

            if (currentCards === 0) {
                const container = document.getElementById('tab-content-container');
                const isOwnProfile = <?php echo $isOwnProfile ? 'true' : 'false'; ?>;
                const username = '<?php echo h($profileUser['username']); ?>';

                let message = '';
                switch (currentTab) {
                    case 'completed':
                        message = isOwnProfile ? '–í—ã –µ—â–µ –Ω–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.' : username + ' –Ω–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.';
                        break;
                    case 'planned':
                        message = isOwnProfile ? '–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.' : username + ' –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª(–∞) –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.';
                        break;
                    case 'watching':
                        message = isOwnProfile ? '–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.' : username + ' –Ω–µ –Ω–∞—á–∞–ª(–∞) —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.';
                        break;
                    case 'dropped':
                        message = isOwnProfile ? '–í—ã –µ—â–µ –Ω–µ –±—Ä–æ—Å–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.' : username + ' –Ω–µ –±—Ä–æ—Å–∏–ª(–∞) –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.';
                        break;
                }

                container.innerHTML = `<div class="profile-container"><p>${message}</p></div>`;
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        function showDragIndicator() {
            const indicator = document.getElementById('dragIndicator');
            if (indicator) {
                indicator.classList.add('show');
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        function hideDragIndicator() {
            const indicator = document.getElementById('dragIndicator');
            if (indicator) {
                indicator.classList.remove('show');
            }
        }

        <?php endif; ?>

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π)
        function showToast(message, type = 'info') {
            const container = document.getElementById('toastContainer');
            if (!container) return;

            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;

            container.appendChild(toast);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);

            // –°–∫—Ä—ã–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º toast —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (container.contains(toast)) {
                        container.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }

        <?php if ($isOwnProfile): ?>
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è drag-and-drop
        const originalInitAnimeCardHandlers = initAnimeCardHandlers;
        initAnimeCardHandlers = function() {
            console.log('initAnimeCardHandlers –≤—ã–∑–≤–∞–Ω–∞');
            originalInitAnimeCardHandlers();

            // –î–æ–±–∞–≤–ª—è–µ–º draggable –∞—Ç—Ä–∏–±—É—Ç—ã –∫ –Ω–æ–≤—ã–º –∫–∞—Ä—Ç–æ—á–∫–∞–º
            const animeCards = document.querySelectorAll('.anime-card');
            console.log('–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–Ω–∏–º–µ:', animeCards.length);

            animeCards.forEach((card, index) => {
                if (!card.hasAttribute('draggable')) {
                    card.setAttribute('draggable', 'true');
                    console.log(`–î–æ–±–∞–≤–ª–µ–Ω draggable –∫ –∫–∞—Ä—Ç–æ—á–∫–µ ${index + 1}`);
                }
                if (!card.hasAttribute('data-current-status')) {
                    card.setAttribute('data-current-status', currentTab);
                    console.log(`–î–æ–±–∞–≤–ª–µ–Ω data-current-status="${currentTab}" –∫ –∫–∞—Ä—Ç–æ—á–∫–µ ${index + 1}`);
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                console.log(`–ö–∞—Ä—Ç–æ—á–∫–∞ ${index + 1}:`, {
                    draggable: card.getAttribute('draggable'),
                    currentStatus: card.getAttribute('data-current-status'),
                    animeId: card.getAttribute('data-anime-id')
                });
            });
        };
        <?php endif; ?>
    </script>
</body>
</html>
